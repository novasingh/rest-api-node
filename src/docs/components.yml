components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        dob:
          type: string
          format: date
        phone:
          type: string
        address:
          type: string
        driverN:
          type: string
        truckN:
          type: string
        licensePlate:
          type: string
        insuranceN:
          type: string              
        role:
          type: string
          enum: [driver, manager, admin]
      example:
        id: 5ebac534954b54139806c112
        email: fake@example.com
        firstName: fake
        lastName: name
        role: user

    Token:
      type: object
      properties:
        token:
          type: string
        expires:
          type: string
          format: date-time
      example:
        token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWJhYzUzNDk1NGI1NDEzOTgwNmMxMTIiLCJpYXQiOjE1ODkyOTg0ODQsImV4cCI6MTU4OTMwMDI4NH0.m1U63blB0MLej_WfB7yC2FTMnCziif9X8yzwDEfJXAg
        expires: 2020-05-12T16:18:04.793Z

    AuthTokens:
      type: object
      properties:
        access:
          $ref: '#/components/schemas/Token'
        refresh:
          $ref: '#/components/schemas/Token'

    Error:
      type: object
      properties:
        code:
          type: number
        message:
          type: string

    Notification:
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
        message:
          type: string
        read:
          type: boolean
          default: false
        createdAt:
          type: string
          format: date-time
      example:
        id: '60d5f484ef27b02c3f1433aa'
        userId: '66a28b866ba2fcac0457e2a6'
        message: 'You have a new document upload request.'
        read: false
        createdAt: '2021-06-25T12:00:00Z'

    Company:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        logo:
          type: string
          format: uri
        type:
          type: string
        manager:
          type: string
          description: 'ID of the manager associated with the company'
      example:
        id: '66a7748aa4d4487148a8510d'
        name: 'HealMeFit'
        logo: 'https://example.com/path/to/logo.png'
        type: 'Health & Fitness'
        manager: '66a28b866ba2fcac0457e2a6'

    FitbitToken:
      type: object
      properties:
        userId:
          type: string
        accessToken:
          type: string
        refreshToken:
          type: string
        expiresIn:
          type: integer
      example:
        userId: '66a28b866ba2fcac0457e2a6'
        accessToken: 'abc123'
        refreshToken: 'xyz789'
        expiresIn: 3600

  responses:
    DuplicateEmail:
      description: Email already taken
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 400
            message: Email already taken
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 401
            message: Please authenticate
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 403
            message: Forbidden
    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 404
            message: Not found

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
